#pragma vertex Vert
#pragma fragment Frag

#include "UnityCG.cginc"
#include "textsdf.cginc"

struct VertexInput
{
    float4 position : POSITION;
    float3 normal : NORMAL;
    fixed4 color : COLOR;
    float2 texcoord : TEXCOORD0;
};

struct VertexOutput 
{
    float4 position : SV_POSITION;
    fixed4 faceColor : COLOR;
    float4 texcoord : TEXCOORD0;
    half4 param : TEXCOORD1;
};

// TODO: This is a predefined bgfx uniform so bgfx will recognize it and handle binding it.
// Unity has a similar predefined variable '_ScreenParams' but it can't be used here
// because it does not have an exact mapping to the bgfx one and we currently don't handle 
// the use of predefined Unity variables that don't have bgfx equivalents.
uniform float4 u_viewTexel;

sampler2D u_MainTex;

VertexOutput Vert(VertexInput input) 
{
    VertexOutput output;

    float4 vert = input.position;
    //vert.x += u_VertexOffsetX;
    //vert.y += u_VertexOffsetY;
    float4 vPosition = UnityObjectToClipPos(vert.xyz);

    float2 pixelSize = vPosition.ww;

    pixelSize *= abs(mul((float2x2)UNITY_MATRIX_P, u_viewTexel.xy));

    float scale = rsqrt(dot(pixelSize, pixelSize));
    scale *= /*abs(input.texcoord1.y) **/ u_GradientScale * (u_Sharpness + 1.0);

    // Works around this bug: https://unity3d.atlassian.net/browse/DOTSR-2371
    scale = clamp(scale, 0, 1000.0);

#if defined(OUTLINE_ON)
    scale /= 1.0f + (u_OutlineSoftness * u_ScaleRatioA * scale);
    float outline = u_OutlineWidth * u_ScaleRatioA * 0.5f * scale;
#else
    float outline = 0.0f;
#endif

    float bias = 0.5f * scale - 0.5f;

    float opacity = input.color.a;

    fixed4 faceColor = fixed4(input.color.rgb, opacity) * u_FaceColor;
    faceColor.rgb *= faceColor.a;

#if defined(OUTLINE_ON)
    fixed4 outlineColor = u_OutlineColor;
    outlineColor.a *= opacity;
    outlineColor.rgb *= outlineColor.a;
    outlineColor = lerp(faceColor, outlineColor, sqrt(min(1.0f, (outline * 2.0f))));
#endif

    output.position = vPosition;
    output.faceColor = faceColor;
    output.texcoord = float4(input.texcoord, 0.0f, 0.0f);
    output.param = float4(scale, bias - outline, bias + outline, bias);

#if defined(OUTLINE_ON)
    output.outlineColor = outlineColor;
#endif

    return output;
}

const float smoothval = 1.0f/16.0f;

float4 Frag(VertexOutput input) : SV_TARGET 
{
    // scale and bias to expand the distance value by.  Map 0.5-s .. 0.5+s to 0 .. 1
    half scale = input.param.x;
    half bias = input.param.w;

    half d = tex2D(u_MainTex, input.texcoord.xy).a * scale;
    half4 c = input.faceColor * saturate(d - bias);

    #ifdef OUTLINE_ON
    c = lerp(input.outlineColor, input.faceColor, saturate(d - input.param.z));
    c *= saturate(d - input.param.y);
    #endif

    #ifdef UNDERLAY_ON
    d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x; // TODO v_texcoord1?
    c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * saturate(d - input.underlayParam.y) * (1 - c.a);
    #endif

    #ifdef UNDERLAY_INNER
    half sd = saturate(d - input.param.z);
    d = tex2D(_MainTex, input.texcoord1.xy).a * input.underlayParam.x;
    c += float4(_UnderlayColor.rgb * _UnderlayColor.a, _UnderlayColor.a) * (1 - saturate(d - input.underlayParam.y)) * sd * (1 - c.a);
    #endif

    // Alternative implementation to UnityGet2DClipping with support for softness.
    #ifdef UNITY_UI_CLIP_RECT
    half2 m = saturate((_ClipRect.zw - _ClipRect.xy - abs(input.mask.xy)) * input.mask.zw);
    c *= m.x * m.y;
    #endif

    #if defined(UNDERLAY_ON) || defined(UNERLAY_INNER)
    c *= input.texcoord1.z;
    #endif

    #ifdef UNITY_UI_ALPHACLIP
    clip(c.a - 0.001);
    #endif

    return c;
}